
% MDL_OPENMANIPULATOR_PRO Create model of OpenManipulator-Pro
%
% This script defines the kinematic and dynamic parameters of the
% OpenManipulator-Pro robotic arm using standard DH conventions.

clear L
deg = pi/180;
J_motor = [3e-5, 2e-5, 1.5e-5, 1e-5, 8e-6, 5e-6];  % kg*m^2
gr = 10;
% I still need to check which motor is for which joint for the gear ratio
% the B, Tc(from the puma) and the Jm is estimated(from chatgpt)
% Link 1
L(1) = Revolute('d', 0, ...
    'a', 0, ...
    'alpha', -pi/2, ...
    'm', 0.9436, ...
    'r', [0, -0.00018, -0.0010], ...
    'I', [1.5684e-03, 4.5498e-04, 1.5561e-03, 0, 0, 0], ...
    'qlim', [-160 160]*deg, ...
    'Jm', J_motor(1), ...
    'B', 1.48e-3, ...         % actuator viscous friction coefficient (measured at the motor)
    'Tc', [0.395 -0.435], ...
    'G',501.9);

% Link 2
L(2) = Revolute('d', 0, ...
    'a', 0.26569, ...
    'alpha', 0, ...
    'm', 0.7107, ...
    'r', [0.0000, -0.0001, -0.0001], ...
    'I', [1.0144e-03, 2.2465e-04, 1.0101e-03, 0, 0, 0], ...
    'qlim', [-160 160]*deg, ...
    'Jm', J_motor(2), ...
    'B', .817e-3, ...
    'Tc', [0.126 -0.071], ...
    'G',501.9);

% Link 3
L(3) = Revolute('d', 0, ...
    'a', 0.030, ...
    'alpha', -pi/2, ...
    'm', 1.1435, ...
    'r', [0.0000, -0.0001, -0.0001], ...
    'I', [1.4521e-03, 3.7852e-04, 1.3556e-03, 0, 0, 0], ...
    'qlim', [-160 160]*deg, ...
    'Jm', J_motor(3), ...
    'B', 1.38e-3, ...
    'Tc', [0.132, -0.105], ...
    'G',501.9);

% Link 4
L(4) = Revolute('d', 0.258, ...
    'a', 0, ...
    'alpha', -pi/2, ...
    'm', 0.4664, ...
    'r', [0.0000, -0.0001, -0.0001], ...
    'I', [1.0747e-04, 2.7101e-05, 9.9022e-05, 0, 0, 0], ...
    'qlim', [-160 160]*deg, ...
    'Jm', J_motor(4), ...
    'B', 71.2e-6, ...
    'Tc', [11.2e-3, -16.9e-3], ...
    'G',303.8);

% Link 5
L(5) = Revolute('d', 0, ...
    'a', 0, ...
    'alpha', -pi/2, ...
    'm', 0.4664, ...
    'r', [0.0000, -0.0001, -0.0001], ...
    'I', [1.1016e-04, 2.5311e-05, 9.2793e-05, 0, 0, 0], ...
    'qlim', [-160 160]*deg, ...
    'Jm', J_motor(5), ...
    'B', 82.6e-6, ...
    'Tc', [9.26e-3, -14.5e-3], ...
    'G',303.8);

% Link 6 (End-Effector)
L(6) = Revolute('d', 0, ...
    'a', 0, ...
    'alpha', 0, ...
    'm', 1.0022, ...
    'r', [0.0000, -0.0001, -0.0001], ...
    'I', [6.0159e-04, 1.0787e-03, 7.1491e-04, 0, 0, 0], ...
    'qlim', [-160 160]*deg, ...
    'Jm', J_motor(6), ...
    'B', 36.7e-6, ...
    'Tc', [3.96e-3, -10.5e-3], ...
    'G',303.8);

% Assemble the SerialLink object
openmanipulator_pro = SerialLink(L, 'name', 'OpenManipulator-Pro');

% Define common joint configurations
qz = zeros(1,6);                 % Zero angles
qr = [0, pi/2, -pi/2, 0, 0, 0];  % Ready pose
qs = [0, 0, -pi/2, 0, 0, 0];     % Stretched pose
qn = [0, pi/2, pi, 0, pi/4, 0];  % Nominal pose
qn = [0, -pi/4, 0, 0, pi/4, 0];  % Nominal pose

% % Assign configurations to the robot model
% openmanipulator_pro.configs = struct('qz', qz, 'qr', qr, 'qs', qs, 'qn', qn);

% Optionally, assign a 3D model for visualization (if available)
% openmanipulator_pro.model3d = 'ROBOTIS/openmanipulator_pro';
openmanipulator_pro.plot(qn)

% Display the robot model
disp(openmanipulator_pro);
clear L

